package com.hook38.sporttimer.model.sql;

import com.hook38.sporttimer.model.sql.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TIME_UNIT_SQL.
 */
public class TimeUnitSQL {

    private Long id;
    /** Not-null value. */
    private String timeunit;
    private int orders;
    private long routineId;

    /** Used to resolve relations */
    private DaoSession daoSession;

    /** Used for active entity operations. */
    private TimeUnitSQLDao myDao;

    private RoutineSQL routineSQL;
    private Long routineSQL__resolvedKey;


    public TimeUnitSQL() {
    }

    public TimeUnitSQL(Long id) {
        this.id = id;
    }

    public TimeUnitSQL(Long id, String timeunit, int orders, long routineId) {
        this.id = id;
        this.timeunit = timeunit;
        this.orders = orders;
        this.routineId = routineId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTimeUnitSQLDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getTimeunit() {
        return timeunit;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTimeunit(String timeunit) {
        this.timeunit = timeunit;
    }

    public int getOrders() {
        return orders;
    }

    public void setOrders(int orders) {
        this.orders = orders;
    }

    public long getRoutineId() {
        return routineId;
    }

    public void setRoutineId(long routineId) {
        this.routineId = routineId;
    }

    /** To-one relationship, resolved on first access. */
    public RoutineSQL getRoutineSQL() {
        if (routineSQL__resolvedKey == null || !routineSQL__resolvedKey.equals(routineId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RoutineSQLDao targetDao = daoSession.getRoutineSQLDao();
            routineSQL = targetDao.load(routineId);
            routineSQL__resolvedKey = routineId;
        }
        return routineSQL;
    }

    public void setRoutineSQL(RoutineSQL routineSQL) {
        if (routineSQL == null) {
            throw new DaoException("To-one property 'routineId' has not-null constraint; cannot set to-one to null");
        }
        this.routineSQL = routineSQL;
        routineId = routineSQL.getId();
        routineSQL__resolvedKey = routineId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
